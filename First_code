{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"First_code","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyN7l8E1mXOz7wrytwgS6An2"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"9RtichxFKl5l","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":295},"executionInfo":{"status":"ok","timestamp":1593727785979,"user_tz":-180,"elapsed":1681,"user":{"displayName":"Yusuf Oluwatoki","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhaOnRRMPLomnM4rR2PWjD5vbNpzJM_7KzY-a_9=s64","userId":"09863356095814298563"}},"outputId":"d4f11b7c-1f9f-4f97-820f-34c6f6f5eb34"},"source":["import numpy as np\n","from matplotlib import pyplot as plt\n","\n","ys = 200 + np.random.randn(100)\n","x = [x for x in range(len(ys))]\n","\n","plt.plot(ys, '-')\n","plt.fill_between(x, ys, 195, where=(ys > 195), facecolor='k', alpha=0.73)\n","plt.xlabel(\"Index\")\n","plt.ylabel(\"Realisation\")\n","plt.title(\"Sample Visualization\")\n","plt.autoscale(enable=True, axis='both', tight=True)\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"slQYPsv4uJ6U","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1594216727632,"user_tz":-180,"elapsed":974,"user":{"displayName":"Yusuf Oluwatoki","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhaOnRRMPLomnM4rR2PWjD5vbNpzJM_7KzY-a_9=s64","userId":"09863356095814298563"}},"outputId":"610c9c4f-8fd5-4ca4-a398-518401099b66"},"source":["from tiingo import TiingoClient\n","import pandas as pd, datetime, numpy as np\n","import matplotlib.pyplot as plt\n","import warnings\n","warnings.filterwarnings('ignore') #Tiingo API is returning a warning due to an upcoming pandas update#User Set Up\n","data = {'Stocks':['GOOGL', 'TSLA','AAPL'], 'Quantity':[100, 50, 300]} #Define your holdings\n","ScenariosNo = 500 #Define the number of scenarios you want to run\n","Percentile = 99 #Define your confidence interval\n","VarDaysHorizon = 1 #Define your time period\n","info = 1 #1 if you want more info returned by the script# Create a DataFrame of holdings\n","df = pd.DataFrame(data)\n","print('[INFO] Calculating the max amount of money the portfolio will lose within',\n","      VarDaysHorizon, 'days', Percentile, 'percent of the time.')"],"execution_count":35,"outputs":[{"output_type":"stream","text":["[INFO] Calculating the max amount of money the portfolio will lose within 1 days 99 percent of the time.\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"9CA4bTeruNsI","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":143},"executionInfo":{"status":"ok","timestamp":1594216750474,"user_tz":-180,"elapsed":953,"user":{"displayName":"Yusuf Oluwatoki","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhaOnRRMPLomnM4rR2PWjD5vbNpzJM_7KzY-a_9=s64","userId":"09863356095814298563"}},"outputId":"822a2cda-c7ba-4e3a-e2ac-7416bc321ad4"},"source":["df"],"execution_count":37,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Stocks</th>\n","      <th>Quantity</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>GOOGL</td>\n","      <td>100</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>TSLA</td>\n","      <td>50</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>AAPL</td>\n","      <td>300</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  Stocks  Quantity\n","0  GOOGL       100\n","1   TSLA        50\n","2   AAPL       300"]},"metadata":{"tags":[]},"execution_count":37}]},{"cell_type":"code","metadata":{"id":"BSHfVD_erLex","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":182},"executionInfo":{"status":"ok","timestamp":1594215948547,"user_tz":-180,"elapsed":6897,"user":{"displayName":"Yusuf Oluwatoki","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhaOnRRMPLomnM4rR2PWjD5vbNpzJM_7KzY-a_9=s64","userId":"09863356095814298563"}},"outputId":"b17f13b3-c41d-4b79-eee2-5deab522ca61"},"source":["pip install tiingo"],"execution_count":2,"outputs":[{"output_type":"stream","text":["Collecting tiingo\n","  Downloading https://files.pythonhosted.org/packages/a6/c3/f618cebfb1d49b693d0f92249ce9b3685eb3f3b79a8d53a8a7e2eb87715a/tiingo-0.12.0-py2.py3-none-any.whl\n","Requirement already satisfied: requests in /usr/local/lib/python3.6/dist-packages (from tiingo) (2.23.0)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.6/dist-packages (from requests->tiingo) (1.24.3)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.6/dist-packages (from requests->tiingo) (2020.6.20)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.6/dist-packages (from requests->tiingo) (3.0.4)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.6/dist-packages (from requests->tiingo) (2.9)\n","Installing collected packages: tiingo\n","Successfully installed tiingo-0.12.0\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"VwEfqDfJcv9h","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1594216258152,"user_tz":-180,"elapsed":957,"user":{"displayName":"Yusuf Oluwatoki","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhaOnRRMPLomnM4rR2PWjD5vbNpzJM_7KzY-a_9=s64","userId":"09863356095814298563"}}},"source":["import pandas as pd\n","data = {'Stocks':['GOOGL', 'TSLA','AAPL'], 'Quantity':[100, 50, 300]} \n","#Define your holdings# Create a DataFrame of holdings\n","df = pd.DataFrame(data)"],"execution_count":18,"outputs":[]},{"cell_type":"code","metadata":{"id":"ubtOZUKWrKwk","colab_type":"code","colab":{}},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Wzs2F8IgMkC_","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1594216766550,"user_tz":-180,"elapsed":972,"user":{"displayName":"Yusuf Oluwatoki","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhaOnRRMPLomnM4rR2PWjD5vbNpzJM_7KzY-a_9=s64","userId":"09863356095814298563"}}},"source":["from tiingo import TiingoClient\n","def SourceHistoricPrices():\n","    if info == 1: print('[INFO] Fetching stock prices for portfolio holdings')\n","    #Set Up for Tiingo\n","    config = {}\n","    config['session'] = True\n","    config['api_key'] = '6e7cc08a6a571c977e9dd4f2ebe04226fbe2cf8f'\n","    client = TiingoClient(config)\n","    #Create a list of tickers for the API call\n","    Tickers = []\n","    i=0\n","    for ticker in data:\n","        while i <= len(data):\n","            Tickers.append(data[ticker][i])\n","            i=i+1\n","    if info == 1: print('[INFO] Portfolio Holdings determined as', Tickers)\n","    if info == 1: print('[INFO] Portfolio Weights determined as', data['Quantity'])\n","    #Call the API and store the data\n","    global HistData\n","    HistData = client.get_dataframe(Tickers, metric_name='close', startDate=dateforNoOfScenarios(today), endDate=today)\n","    if info == 1: print('[INFO] Fetching stock prices completed.', len(HistData), 'days.')\n","    return(HistData)"],"execution_count":38,"outputs":[]},{"cell_type":"code","metadata":{"id":"ZcsOQ8RgMlAv","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1594216820500,"user_tz":-180,"elapsed":753,"user":{"displayName":"Yusuf Oluwatoki","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhaOnRRMPLomnM4rR2PWjD5vbNpzJM_7KzY-a_9=s64","userId":"09863356095814298563"}}},"source":["ScenariosNo = 500 \n","#Define the number of scenarios you want to run\n","import datetime\n","today = datetime.date.today() - datetime.timedelta(days=1)\n","\n","def is_business_day(date):\n","    return bool(len(pd.bdate_range(date, date)))\n","    def dateforNoOfScenarios(date):\n","      i=0\n","      w=0\n","    while i < ScenariosNo:\n","        if (is_business_day(today - datetime.timedelta(days = w)) == True):\n","            i = i+1\n","            w = w+1\n","        else:\n","            w = w+1\n","            continue\n","    #print('gotta go back these many business days',i)\n","    #print('gotta go back these many days',w)\n","    #remember to add an extra day as percentage difference will leave first value blank (days +1 = scenario numbers)\n","    return(today - datetime.timedelta(days = w*1.04 + 1)) \n","    #4% is an arbitrary number I've calculated the holidays to be in 500days."],"execution_count":40,"outputs":[]},{"cell_type":"code","metadata":{"id":"stbdEwpXdH3-","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1594216827525,"user_tz":-180,"elapsed":1018,"user":{"displayName":"Yusuf Oluwatoki","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhaOnRRMPLomnM4rR2PWjD5vbNpzJM_7KzY-a_9=s64","userId":"09863356095814298563"}}},"source":["def ValuePortfolio():\n","    HistData['PortValue'] = 0\n","    i=0\n","    if info == 1: print('[INFO] Calculating the portfolio value for each day')\n","    while i<= len(data):\n","        stock = data['Stocks'][i]\n","        quantity = data['Quantity'][i]\n","        HistData['PortValue'] = HistData[stock] * quantity + HistData['PortValue']\n","        i = i+1"],"execution_count":41,"outputs":[]},{"cell_type":"code","metadata":{"id":"QaV9w2vOdL4A","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1594216833087,"user_tz":-180,"elapsed":733,"user":{"displayName":"Yusuf Oluwatoki","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhaOnRRMPLomnM4rR2PWjD5vbNpzJM_7KzY-a_9=s64","userId":"09863356095814298563"}}},"source":["def CalculateVaR():\n","    if info == 1: print('[INFO] Calculating Daily % Changes')\n","    HistData['Perc_Change'] = HistData['PortValue'].pct_change() #calculating percentage change"],"execution_count":42,"outputs":[]},{"cell_type":"code","metadata":{"id":"eKdKFtQgdWDn","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":191},"executionInfo":{"status":"error","timestamp":1594216851883,"user_tz":-180,"elapsed":817,"user":{"displayName":"Yusuf Oluwatoki","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhaOnRRMPLomnM4rR2PWjD5vbNpzJM_7KzY-a_9=s64","userId":"09863356095814298563"}},"outputId":"c34c8957-f901-4f6e-f470-3a7cc9f18f58"},"source":["HistData['DollarChange'] = HistData.loc[HistData.index.max()]['PortValue'] * HistData['Perc_Change'] #calculate money change based on current valuation\n","if info == 1: print('[INFO] Picking', round(HistData.loc[HistData.index.max()]['PortValue'],2),' value from ', HistData.index.max().strftime('%Y-%m-%d'), ' as the latest valuation to base the monetary returns')"],"execution_count":44,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-44-fbc61a198182>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mHistData\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'DollarChange'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mHistData\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mHistData\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'PortValue'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0mHistData\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Perc_Change'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;31m#calculate money change based on current valuation\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0minfo\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'[INFO] Picking'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mround\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mHistData\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mHistData\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'PortValue'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m' value from '\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mHistData\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstrftime\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'%Y-%m-%d'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m' as the latest valuation to base the monetary returns'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'HistData' is not defined"]}]},{"cell_type":"code","metadata":{"id":"lDd4NTAndbBA","colab_type":"code","colab":{}},"source":["ValueLocForPercentile = round(len(HistData) * (1 - (Percentile / 100)))\n","if info == 1: print('[INFO] Picking the', ValueLocForPercentile, 'th highest value')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"SSB-YMIAdcYw","colab_type":"code","colab":{}},"source":["global SortedHistData\n","SortedHistData = HistData.sort_values(by=['DollarChange'])\n","if info == 1: print('[INFO] Sorting the results by highest max loss')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"1KULJi_jswOU","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":135},"executionInfo":{"status":"error","timestamp":1594216673003,"user_tz":-180,"elapsed":758,"user":{"displayName":"Yusuf Oluwatoki","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhaOnRRMPLomnM4rR2PWjD5vbNpzJM_7KzY-a_9=s64","userId":"09863356095814298563"}},"outputId":"dd93ca77-fa26-4665-cc87-858e3ba3e0e6"},"source":["from tiingo import TiingoClient\n","import pandas as pd, datetime, numpy as np\n","import matplotlib.pyplot as plt\n","import warnings\n","warnings.filterwarnings('ignore') #Tiingo API is returning a warning due to an upcoming pandas update#User Set Up\n","data = {'Stocks':['GOOGL', 'TSLA','AAPL'], 'Quantity':[100, 50, 300]} #Define your holdings\n","ScenariosNo = 500 #Define the number of scenarios you want to run\n","Percentile = 99 #Define your confidence interval\n","VarDaysHorizon = 1 #Define your time period\n","info = 1 #1 if you want more info returned by the script# Create a DataFrame of holdings\n","df = pd.DataFrame(data)\n","print('[INFO] Calculating the max amount of money the portfolio will lose within',\n","      VarDaysHorizon, 'days', Percentile, 'percent of the time.')\n","\n","today = datetime.date.today() - datetime.timedelta(days=1)\n","      \n","def is_business_day(date):\n","    return bool(len(pd.bdate_range(date, date)))\n","    def dateforNoOfScenarios(date):\n","      i=0\n","      w=0\n","      while i < ScenariosNo:\n","        if (is_business_day(today - datetime.timedelta(days = w)) == True):\n","            i = i+1\n","            w = w+1\n","        else:\n","            w = w+1\n","            continue\n","    #print('gotta go back these many business days',i)\n","    #print('gotta go back these many days',w)\n","    #remember to add an extra day (days +1 = scenario numbers)\n","    return(today - datetime.timedelta(days = w*1.04 + 1)) #4% is an arbitary number i've calculated the holidays to be in 500days.def SourceHistoricPrices():\n","    if info == 1: print('[INFO] Fetching stock prices for portfolio holdings')\n","    #Set Up for Tiingo\n","    config = {}\n","    config['session'] = True\n","    config['api_key'] = 'private key'\n","    client = TiingoClient(config)\n","    #Create a list of tickers for the API call\n","    Tickers = []\n","    i=0\n","    for ticker in data:\n","        while i <= len(data):\n","            Tickers.append(data[ticker][i])\n","            i=i+1\n","    if info == 1: print('[INFO] Portfolio Holdings determined as', Tickers)\n","    if info == 1: print('[INFO] Portfolio Weights determined as', data['Quantity'])\n","    #Call the API and store the data\n","    global HistData\n","    HistData = client.get_dataframe(Tickers, metric_name='close', startDate=dateforNoOfScenarios(today), endDate=today)\n","    if info == 1: print('[INFO] Fetching stock prices completed.', len(HistData), 'days.')\n","    return(HistData)\n","    def ValuePortfolio():\n","      HistData['PortValue'] = 0\n","      i=0\n","      if info == 1: print('[INFO] Calculating the portfolio value for each day')\n","      while i<= len(data):\n","        stock = data['Stocks'][i]\n","        quantity = data['Quantity'][i]\n","        HistData['PortValue'] = HistData[stock] * quantity + HistData['PortValue']\n","        i = i+1\n","        def CalculateVaR():\n","          if info == 1: print('[INFO] Calculating Daily % Changes')\n","    #calculating percentage change\n","           HistData['Perc_Change'] = HistData['PortValue'].pct_change()\n","    #calculate money change based on current valuation\n","           HistData['DollarChange'] = HistData.loc[HistData.index.max()]['PortValue'] * HistData['Perc_Change'] \n","            if info == 1: print('[INFO] Picking', round(HistData.loc[HistData.index.max()]['PortValue'],2),' value from ', HistData.index.max().strftime('%Y-%m-%d'), ' as the latest valuation to base the monetary returns')\n","            ValueLocForPercentile = round(len(HistData) * (1 - (Percentile / 100)))\n","            if info == 1: print('[INFO] Picking the', ValueLocForPercentile, 'th highest value')\n","    global SortedHistData\n","    SortedHistData = HistData.sort_values(by=['DollarChange'])\n","    if info == 1: print('[INFO] Sorting the results by highest max loss')\n","    VaR_Result = SortedHistData.iloc[ValueLocForPercentile + 1,len(SortedHistData.columns)-1] * np.sqrt(VarDaysHorizon)\n","    print('The portfolio\\'s VaR is:', round(VaR_Result,2))def CalculateES():\n","    ValueLocForPercentile = round(len(HistData) * (1 - (Percentile / 100)))\n","    ES_Result = round(SortedHistData['DollarChange'].head(ValueLocForPercentile).mean(axis=0),2) * np.sqrt(VarDaysHorizon)\n","    print('The portfolios\\'s Expected Shortfall is', ES_Result)SourceHistoricPrices()\n","ValuePortfolio()\n","CalculateVaR()\n","CalculateES()"],"execution_count":34,"outputs":[{"output_type":"error","ename":"IndentationError","evalue":"ignored","traceback":["\u001b[0;36m  File \u001b[0;32m\"<ipython-input-34-4c22557a3c29>\"\u001b[0;36m, line \u001b[0;32m65\u001b[0m\n\u001b[0;31m    HistData['Perc_Change'] = HistData['PortValue'].pct_change()\u001b[0m\n\u001b[0m    ^\u001b[0m\n\u001b[0;31mIndentationError\u001b[0m\u001b[0;31m:\u001b[0m unexpected indent\n"]}]}]}